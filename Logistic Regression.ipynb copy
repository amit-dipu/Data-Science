{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import pandas as pd\n",
    "from sklearn import preprocessing\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df=pd.read_csv(\"train.csv\")\n",
    "test_df=pd.read_csv(\"test.csv\")\n",
    "train_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
       "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      "PassengerId    891 non-null int64\n",
      "Survived       891 non-null int64\n",
      "Pclass         891 non-null int64\n",
      "Name           891 non-null object\n",
      "Sex            891 non-null object\n",
      "Age            714 non-null float64\n",
      "SibSp          891 non-null int64\n",
      "Parch          891 non-null int64\n",
      "Ticket         891 non-null object\n",
      "Fare           891 non-null float64\n",
      "Cabin          204 non-null object\n",
      "Embarked       889 non-null object\n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.6+ KB\n"
     ]
    }
   ],
   "source": [
    "train_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of samples into the train data is 891.\n"
     ]
    }
   ],
   "source": [
    "print('The number of samples into the train data is {}.'.format(train_df.shape[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Data Quality & Missing Value Assessment</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "19.865319865319865"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# percent of missing \"Age\" \n",
    "(train_df['Age'].isnull().sum()/train_df.shape[0])*100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ax = train_df[\"Age\"].hist(bins=15, density=True, stacked=True, color='teal', alpha=0.6)\n",
    "train_df[\"Age\"].plot(kind='density', color='teal')\n",
    "ax.set(xlabel='Age')\n",
    "plt.xlim(-10,85)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "Since \"Age\" is (right) skewed, using the mean might give us biased results by filling in ages that are older than desired. To deal with this, we'll use the median to impute the missing values.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean of \"Age\" is 29.70\n",
      "The median of \"Age\" is 28.00\n"
     ]
    }
   ],
   "source": [
    "# mean age\n",
    "print('The mean of \"Age\" is %.2f' %(train_df[\"Age\"].mean(skipna=True)))\n",
    "# median age\n",
    "print('The median of \"Age\" is %.2f' %(train_df[\"Age\"].median(skipna=True)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Cabin - Missing Values</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percent of missing \"Cabin\" records is 77.10%\n"
     ]
    }
   ],
   "source": [
    "# percent of missing \"Cabin\" \n",
    "print('Percent of missing \"Cabin\" records is %.2f%%' %((train_df['Cabin'].isnull().sum()/train_df.shape[0])*100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "77% of records are missing, so we will not use this variable"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Embarked - Missing Values</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percent of missing \"Embarked\" records is 0.22%\n"
     ]
    }
   ],
   "source": [
    "# percent of missing \"Embarked\" \n",
    "print('Percent of missing \"Embarked\" records is %.2f%%' %((train_df['Embarked'].isnull().sum()/train_df.shape[0])*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "S    644\n",
      "C    168\n",
      "Q     77\n",
      "Name: Embarked, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(train_df['Embarked'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1dcfa860>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(x='Embarked',data=train_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The most common boarding port of embarkation is S.\n"
     ]
    }
   ],
   "source": [
    "print('The most common boarding port of embarkation is %s.' %train_df['Embarked'].value_counts().idxmax())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Final Adjustments to Data (Train & Test)</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = train_df.copy()\n",
    "train_data[\"Age\"].fillna(train_df[\"Age\"].median(skipna=True),inplace=True)\n",
    "train_data[\"Embarked\"].fillna(train_df['Embarked'].value_counts().idxmax(), inplace=True)\n",
    "train_data.drop('Cabin', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId    0\n",
       "Survived       0\n",
       "Pclass         0\n",
       "Name           0\n",
       "Sex            0\n",
       "Age            0\n",
       "SibSp          0\n",
       "Parch          0\n",
       "Ticket         0\n",
       "Fare           0\n",
       "Embarked       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Create categorical variable for traveling alone\n",
    "train_data['TravelAlone']=np.where((train_data[\"SibSp\"]+train_data[\"Parch\"])>0, 0, 1)\n",
    "train_data.drop('SibSp', axis=1, inplace=True)\n",
    "train_data.drop('Parch', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 10 columns):\n",
      "PassengerId    891 non-null int64\n",
      "Survived       891 non-null int64\n",
      "Pclass         891 non-null int64\n",
      "Name           891 non-null object\n",
      "Sex            891 non-null object\n",
      "Age            891 non-null float64\n",
      "Ticket         891 non-null object\n",
      "Fare           891 non-null float64\n",
      "Embarked       891 non-null object\n",
      "TravelAlone    891 non-null int32\n",
      "dtypes: float64(2), int32(1), int64(3), object(4)\n",
      "memory usage: 66.2+ KB\n"
     ]
    }
   ],
   "source": [
    "train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>TravelAlone</th>\n",
       "      <th>Pclass_1</th>\n",
       "      <th>Pclass_2</th>\n",
       "      <th>Pclass_3</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "      <th>Sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>38.0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>26.0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>35.0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>35.0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Survived   Age     Fare  TravelAlone  Pclass_1  Pclass_2  Pclass_3  \\\n",
       "0         0  22.0   7.2500            0         0         0         1   \n",
       "1         1  38.0  71.2833            0         1         0         0   \n",
       "2         1  26.0   7.9250            1         0         0         1   \n",
       "3         1  35.0  53.1000            0         1         0         0   \n",
       "4         0  35.0   8.0500            1         0         0         1   \n",
       "\n",
       "   Embarked_C  Embarked_Q  Embarked_S  Sex_male  \n",
       "0           0           0           1         1  \n",
       "1           1           0           0         0  \n",
       "2           0           0           1         0  \n",
       "3           0           0           1         0  \n",
       "4           0           0           1         1  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#create categorical variables and drop some variables\n",
    "training=pd.get_dummies(train_data, columns=[\"Pclass\",\"Embarked\",\"Sex\"])\n",
    "training.drop('Sex_female', axis=1, inplace=True)\n",
    "training.drop('PassengerId', axis=1, inplace=True)\n",
    "training.drop('Name', axis=1, inplace=True)\n",
    "training.drop('Ticket', axis=1, inplace=True)\n",
    "\n",
    "final_train = training\n",
    "final_train.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 11 columns):\n",
      "Survived       891 non-null int64\n",
      "Age            891 non-null float64\n",
      "Fare           891 non-null float64\n",
      "TravelAlone    891 non-null int32\n",
      "Pclass_1       891 non-null uint8\n",
      "Pclass_2       891 non-null uint8\n",
      "Pclass_3       891 non-null uint8\n",
      "Embarked_C     891 non-null uint8\n",
      "Embarked_Q     891 non-null uint8\n",
      "Embarked_S     891 non-null uint8\n",
      "Sex_male       891 non-null uint8\n",
      "dtypes: float64(2), int32(1), int64(1), uint8(7)\n",
      "memory usage: 30.5 KB\n"
     ]
    }
   ],
   "source": [
    "training.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "<b>Now, apply the same changes to the test data.</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age             86\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             1\n",
       "Cabin          327\n",
       "Embarked         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Fare</th>\n",
       "      <th>TravelAlone</th>\n",
       "      <th>Pclass_1</th>\n",
       "      <th>Pclass_2</th>\n",
       "      <th>Pclass_3</th>\n",
       "      <th>Embarked_C</th>\n",
       "      <th>Embarked_Q</th>\n",
       "      <th>Embarked_S</th>\n",
       "      <th>Sex_male</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>34.5</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>47.0</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>62.0</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>27.0</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>22.0</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Age     Fare  TravelAlone  Pclass_1  Pclass_2  Pclass_3  Embarked_C  \\\n",
       "0  34.5   7.8292            1         0         0         1           0   \n",
       "1  47.0   7.0000            0         0         0         1           0   \n",
       "2  62.0   9.6875            1         0         1         0           0   \n",
       "3  27.0   8.6625            1         0         0         1           0   \n",
       "4  22.0  12.2875            0         0         0         1           0   \n",
       "\n",
       "   Embarked_Q  Embarked_S  Sex_male  \n",
       "0           1           0         1  \n",
       "1           0           1         0  \n",
       "2           1           0         1  \n",
       "3           0           1         1  \n",
       "4           0           1         0  "
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data = test_df.copy()\n",
    "test_data[\"Age\"].fillna(train_df[\"Age\"].median(skipna=True), inplace=True)\n",
    "test_data[\"Fare\"].fillna(train_df[\"Fare\"].median(skipna=True), inplace=True)\n",
    "test_data.drop('Cabin', axis=1, inplace=True)\n",
    "\n",
    "test_data['TravelAlone']=np.where((test_data[\"SibSp\"]+test_data[\"Parch\"])>0, 0, 1)\n",
    "\n",
    "test_data.drop('SibSp', axis=1, inplace=True)\n",
    "test_data.drop('Parch', axis=1, inplace=True)\n",
    "\n",
    "testing = pd.get_dummies(test_data, columns=[\"Pclass\",\"Embarked\",\"Sex\"])\n",
    "testing.drop('Sex_female', axis=1, inplace=True)\n",
    "testing.drop('PassengerId', axis=1, inplace=True)\n",
    "testing.drop('Name', axis=1, inplace=True)\n",
    "testing.drop('Ticket', axis=1, inplace=True)\n",
    "\n",
    "final_test = testing\n",
    "final_test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Exploratory Data Analysis</b>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exploration of Passenger Class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1dd8f1d0>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot('Pclass','Survived',data=train_df, color=\"darkturquoise\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Unsurprisingly, being a first class passenger was safest"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Exploration of Embarked Port"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot('Embarked', 'Survived', data=train_df, color=\"teal\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Passengers who boarded in Cherbourg, France, appear to have the highest survival rate. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot('TravelAlone', 'Survived', data=final_train, color=\"mediumturquoise\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Survived', 'Age', 'Fare', 'TravelAlone', 'Pclass_1', 'Pclass_2',\n",
       "       'Pclass_3', 'Embarked_C', 'Embarked_Q', 'Embarked_S', 'Sex_male'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final_train.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<b>Feature selection</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Selected features: ['TravelAlone', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Embarked_C', 'Embarked_Q', 'Embarked_S', 'Sex_male']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.feature_selection import RFE\n",
    "\n",
    "cols = ['Age', 'Fare', 'TravelAlone', 'Pclass_1', 'Pclass_2',\n",
    "       'Pclass_3', 'Embarked_C', 'Embarked_Q', 'Embarked_S', 'Sex_male'] \n",
    "X = final_train[cols]\n",
    "y = final_train['Survived']\n",
    "# Build a logreg and compute the feature importances\n",
    "model = LogisticRegression()\n",
    "# create the RFE model and select 8 attributes\n",
    "rfe = RFE(model, 8)\n",
    "rfe = rfe.fit(X, y)\n",
    "# summarize the selection of the attributes\n",
    "print('Selected features: %s' % list(X.columns[rfe.support_]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RFECV(cv=10,\n",
       "   estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "          intercept_scaling=1, max_iter=100, multi_class='warn',\n",
       "          n_jobs=None, penalty='l2', random_state=None, solver='warn',\n",
       "          tol=0.0001, verbose=0, warm_start=False),\n",
       "   min_features_to_select=1, n_jobs=None, scoring='accuracy', step=1,\n",
       "   verbose=0)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "\n",
    "from sklearn.feature_selection import RFECV\n",
    "# Create the RFE object and compute a cross-validated score.\n",
    "# The \"accuracy\" scoring is proportional to the number of correct classifications\n",
    "rfecv = RFECV(estimator=LogisticRegression(), step=1, cv=10, scoring='accuracy')\n",
    "rfecv.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal number of features: 9\n",
      "Selected features: ['Age', 'TravelAlone', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Embarked_C', 'Embarked_Q', 'Embarked_S', 'Sex_male']\n"
     ]
    }
   ],
   "source": [
    "print(\"Optimal number of features: %d\" % rfecv.n_features_)\n",
    "print('Selected features: %s' % list(X.columns[rfecv.support_]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot number of features VS. cross-validation scores\n",
    "plt.figure(figsize=(10,6))\n",
    "plt.xlabel(\"Number of features selected\")\n",
    "plt.ylabel(\"Cross validation score (nb of correct classifications)\")\n",
    "plt.plot(range(1, len(rfecv.grid_scores_) + 1), rfecv.grid_scores_)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model evaluation based on simple train/test split using train_test_split() function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, cross_val_score\n",
    "from sklearn.metrics import accuracy_score, classification_report, precision_score, recall_score \n",
    "from sklearn.metrics import confusion_matrix, precision_recall_curve, roc_curve, auc, log_loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "Selected_features=['Age', 'TravelAlone', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Embarked_C', 'Embarked_Q', 'Embarked_S', 'Sex_male']\n",
    "X = final_train[Selected_features]\n",
    "y = final_train['Survived']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\amitks\\AppData\\Local\\Continuum\\anaconda3\\lib\\site-packages\\sklearn\\linear_model\\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=2)\n",
    "\n",
    "# check classification scores of logistic regression\n",
    "logreg = LogisticRegression()\n",
    "logreg.fit(X_train, y_train)\n",
    "y_pred = logreg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "LogisticRegression accuracy is 0.782\n"
     ]
    }
   ],
   "source": [
    "print(logreg.__class__.__name__+\" accuracy is %2.3f\" % accuracy_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
